{
  "@context": "http://json-ld.org/test-suite/context.jsonld",
  "@id": "",
  "@type": "mf:Manifest",
  "name": "Framing",
  "description": "JSON-LD framing tests use object comparison.",
  "baseIri": "http://json-ld.org/test-suite/tests/",
    "sequence": [{
      "@id": "#t0001",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Library framing example",
      "purpose": "Basic example used in playgrond and spec examples.",
      "input": "frame-0001-in.jsonld",
      "frame": "frame-0001-frame.jsonld",
      "expect": "frame-0001-out.jsonld"
    }, {
      "@id": "#t0002",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe w/extra CURIE value.",
      "purpose": "Unless the explicit true is false, processors MUST append extra values to output.",
      "input": "frame-0002-in.jsonld",
      "frame": "frame-0002-frame.jsonld",
      "expect": "frame-0002-out.jsonld"
    }, {
      "@id": "#t0003",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (null)",
      "purpose": "A subject MUST NOT match unless there is a matching @type or non-keyword property.",
      "input": "frame-0003-in.jsonld",
      "frame": "frame-0003-frame.jsonld",
      "expect": "frame-0003-out.jsonld"
    }, {
      "@id": "#t0004",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (type)",
      "purpose": "A subject must match if node has a @type property including any IRI from the corresponding @type property in frame.",
      "input": "frame-0004-in.jsonld",
      "frame": "frame-0004-frame.jsonld",
      "expect": "frame-0004-out.jsonld"
    }, {
      "@id": "#t0005",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (explicit)",
      "purpose": "If property is not in frame, and explicit is true, processors must not add any values for property to output.",
      "input": "frame-0005-in.jsonld",
      "frame": "frame-0005-frame.jsonld",
      "expect": "frame-0005-out.jsonld"
    }, {
      "@id": "#t0006",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "reframe (non-explicit)",
      "purpose": "Unless the explicit true is false, processors MUST append extra values to output.",
      "input": "frame-0006-in.jsonld",
      "frame": "frame-0006-frame.jsonld",
      "expect": "frame-0006-out.jsonld"
    }, {
      "@id": "#t0007",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "input has multiple types",
      "purpose": "If property is a keyword, processors must add property and objects to output.",
      "input": "frame-0007-in.jsonld",
      "frame": "frame-0007-frame.jsonld",
      "expect": "frame-0007-out.jsonld"
    }, {
      "@id": "#t0008",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "array framing cases",
      "purpose": "Various cases showing array output for @container: @set, and non-embedding of node values if @embed: false.",
      "input": "frame-0008-in.jsonld",
      "frame": "frame-0008-frame.jsonld",
      "expect": "frame-0008-out.jsonld"
    }, {
      "@id": "#t0009",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "default value",
      "purpose": "Processors must skip property and property frame if property frame contains @omitDefault with a value of true. Processors must add property to output with a new dictionary having a property @preserve and a value that is a copy of the value of @default in frame if it exists, or the string @null otherwise.",
      "input": "frame-0009-in.jsonld",
      "frame": "frame-0009-frame.jsonld",
      "expect": "frame-0009-out.jsonld"
    }, {
      "@id": "#t0010",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "property CURIE conflict",
      "purpose": "(Not really framing) A term looking like a CURIE becomes a CURIE when framing/compacting if defined as such in frame/context.",
      "input": "frame-0010-in.jsonld",
      "frame": "frame-0010-frame.jsonld",
      "expect": "frame-0010-out.jsonld"
    }, {
      "@id": "#t0011",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "@embed",
      "purpose": "@embed within a frame controls the object embed flag when processing that frame (true and false values).",
      "input": "frame-0011-in.jsonld",
      "frame": "frame-0011-frame.jsonld",
      "expect": "frame-0011-out.jsonld"
    }, {
      "@id": "#t0012",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Array frame",
      "purpose": "Multiple values for @type in frame match different nodes having one or the other type. With @embed false, nodes are serialized as multiple array values of @graph.",
      "input": "frame-0012-in.jsonld",
      "frame": "frame-0012-frame.jsonld",
      "expect": "frame-0012-out.jsonld"
    }, {
      "@id": "#t0013",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Replace existing embed",
      "purpose": "An empty frame matches all objects, even if embedded, causing them to be serialized under @graph.",
      "input": "frame-0013-in.jsonld",
      "frame": "frame-0013-frame.jsonld",
      "expect": "frame-0013-out.jsonld"
    }, {
      "@id": "#t0014",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Replace existing embed on 2nd pass",
      "purpose": "An embedded node with matches the top-level frame (on @type) is framed under @graph and continues to be embedded. Other nodes continue to be embedded.",
      "input": "frame-0014-in.jsonld",
      "frame": "frame-0014-frame.jsonld",
      "expect": "frame-0014-out.jsonld"
    }, {
      "@id": "#t0015",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Replace deeply-nested embed",
      "purpose": "Torture test.",
      "input": "frame-0015-in.jsonld",
      "frame": "frame-0015-frame.jsonld",
      "expect": "frame-0015-out.jsonld"
    }, {
      "@id": "#t0016",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Use @type in ducktype filter",
      "purpose": "A subject must match if node has a @type property and frame has a @type property containing only an empty dictionary.",
      "input": "frame-0016-in.jsonld",
      "frame": "frame-0016-frame.jsonld",
      "expect": "frame-0016-out.jsonld"
    }, {
      "@id": "#t0017",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Non-flat input",
      "purpose": "Framing flattens expanded input, allowing for deeply embedded input to be re-framed.",
      "input": "frame-0017-in.jsonld",
      "frame": "frame-0017-frame.jsonld",
      "expect": "frame-0017-out.jsonld"
    }, {
      "@id": "#t0018",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "no frame @context but @graph output",
      "purpose": "Set framing context to the value of @context from frame, if it exists, or to a new empty context, otherwise.",
      "input": "frame-0018-in.jsonld",
      "frame": "frame-0018-frame.jsonld",
      "expect": "frame-0018-out.jsonld"
    }, {
      "@id": "#t0019",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Resources can be re-embedded again in each top-level frame match",
      "purpose": "@type matching matches nodes at top-level, and embedding causes them be embedded where referenced.",
      "input": "frame-0019-in.jsonld",
      "frame": "frame-0019-frame.jsonld",
      "expect": "frame-0019-out.jsonld"
    }, {
      "@id": "#t0020",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Blank nodes in an array",
      "purpose": "Empty frame matches all nodes at top-level, and repeats where embedded.",
      "input": "frame-0020-in.jsonld",
      "frame": "frame-0020-frame.jsonld",
      "expect": "frame-0020-out.jsonld"
    }, {
      "@id": "#t0021",
      "@type": ["jld:PositiveEvaluationTest", "jld:FrameTest"],
      "name": "Blank nodes in @type",
      "purpose": "Empty frame matches all nodes at top-level, and repeats where embedded (with list content).",
      "input": "frame-0021-in.jsonld",
      "frame": "frame-0021-frame.jsonld",
      "expect": "frame-0021-out.jsonld"
    }]
}
